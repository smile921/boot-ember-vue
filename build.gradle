/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */

 buildscript {
	repositories {
		jcenter()
		maven { url 'https://repo.spring.io/snapshot' }
		maven { url 'https://repo.spring.io/milestone' }
	}
	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE'
	}
}
// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
 
group = "org.smile921.boot"
version = "0.0.1"
jar {
    baseName = 'boot.ember.vue'
}

ext {
    webjarconfig = [
            staticHTMLFilesDir : "dist/dist",
            //subDir : ""
            subDir : "webjars/boot.ember.vue/${version}"
    ]
}


//bootRun {   
//      addResources = true
//}

sourceCompatibility = '1.8'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
	mavenLocal()
	maven { url "https://repo.spring.io/milestone" }
}

/* Setup UTF-8 for compile AND test compilation*/
[ compileJava, compileTestJava ]*.options*.encoding = 'UTF-8'

 

/* Per default GRADLE stops the build if one single test fails. We want to have all tests executed. */
test { 
      ignoreFailures = true
}

 

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile("org.springframework.boot:spring-boot-starter-web:1.5.10.RELEASE")
	compile("org.springframework.boot:spring-boot-starter-aop:1.5.10.RELEASE")
	compile("org.springframework.boot:spring-boot-starter-data-jpa:1.5.10.RELEASE")
	compile("org.springframework.boot:spring-boot-starter:1.5.10.RELEASE")
	compile("org.springframework.boot:spring-boot-devtools:1.5.10.RELEASE")
	compile('org.hibernate:hibernate-core:5.0.12.Final')
	compile('org.xerial:sqlite-jdbc:3.7.2')
	//compile('org.xerial:sqlite-jdbc:3.7.2')
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
	testCompile("org.springframework.boot:spring-boot-starter-test:1.5.10.RELEASE")
}
 

/*
****************************************eclipse**************
*/
/* ensure eclipse source folders are always created, even when not inside GIT */
def eclipseSourceFolders=[
	'src/main/java',
	'src/main/resources',
	'src/test/java',
	'src/test/resources'
];

tasks.eclipse.dependsOn << {
		
	for (String sourceFolder: eclipseSourceFolders){ 
		def resourceDir = new File(project.projectDir, sourceFolder)
		if( !resourceDir.exists() && ! resourceDir.mkdirs() ) {
    		logger.info("Not able to create %1",resourceDir);
    	}
	}
}

/* To have javadocs in eclipse added - where no source are available - we need these lines:
 * see https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseClasspath.html
 */
eclipse {	 
  classpath {
	downloadSources = true // default: true
	downloadJavadoc = true // default: false
  }
}

/* setup eclipse with project encoding as UTF-8 (for editors) */
eclipseJdt.doLast {
	File f = file('.settings/org.eclipse.core.resources.prefs')
	f.write('eclipse.preferences.version=1\n')
	f.append('encoding/<project>=utf-8')
}


/**
********************************maven*******************************
*/
/* Continous integration part - use build number in version when 'ci.buildNumber' is set*/
def buildNr = System.getenv('ci.buildNumber')
  	if (buildNr != null && ! buildNr.isEmpty()){
	version= version + "_"+buildNr
}
/**
**********************************java*************************
*/
	


/**
 * Task to create source jars
 */
task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

/**
 * Task to create javadoc jars
 */
task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

configurations {
    webjar
}

task webjar(type: Zip) {
    // stores jar-file in "target/${version}/distributions"
    extension 'jar'
    classifier 'webjar'
      from (webjarconfig.staticHTMLFilesDir) {
        into("META-INF/resources/" + webjarconfig.subDir)
    }
    outputs.file archivePath
}

/**
 * Define artifacts
 */
artifacts {
	archives sourcesJar
	archives javadocJar
	archives webjar(webjar.archivePath) {
        type 'jar'
        builtBy webjar
    }
}

/**
*****************************************libarary ******************************
*/ 

task copyDependencies(type: Copy){
         from configurations.compile
         into 'build/dependencies'
                 
     }
/**
***************************************************************************************
*/